// DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.
//  
// This material is based upon work supported by the Department of the Air Force under Air Force Contract No. FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Department of the Air Force.
//  
// Â© 2024 Massachusetts Institute of Technology.
// Subject to FAR52.227-11 Patent Rights - Ownership by the contractor (May 2014)
//  
// The software/firmware is provided to you on an As-Is basis
//  
// Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MITLL/Scripts/SproutControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SproutControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SproutControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SproutControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bfdffac8-ca17-4d18-86ac-c2d4c7b21ac4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a872e7b5-bae9-44a6-90dd-85a04b8d952b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""bcbbafcb-9878-4cd2-a498-9c61146794bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleLight"",
                    ""type"": ""Button"",
                    ""id"": ""a2b156ff-d29e-4fc7-9be4-1c8f20ed7e6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EmergencyStop"",
                    ""type"": ""Button"",
                    ""id"": ""d681a803-b14c-405f-82ff-951e764ebb03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncrementLight"",
                    ""type"": ""Button"",
                    ""id"": ""24154237-4c61-491b-942d-2bde28ebdc62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecrementLight"",
                    ""type"": ""Button"",
                    ""id"": ""4c5a38b0-9223-4d78-948f-4b626527efd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RandomizePosition"",
                    ""type"": ""Button"",
                    ""id"": ""e423c2fc-d0a9-44f2-ac1c-401cea73e44f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17056c72-fabe-402d-bf7b-fed2925dd0fb"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""7cb53a29-bf0d-4b51-a942-4f8496fb78f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""666fcb04-92a3-4b21-b3f5-48298f2bba81"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f0fcca1-a404-462c-a5ca-e2a36565d399"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3240f94f-652d-47fa-aaaa-cc041053a95a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0df1e9ad-3da7-4b6d-896e-9bcd968db2fe"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4342782e-0efb-481f-a6b4-a798d3d51b5e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea53bcef-7617-497e-9076-d5d22b6b8a1f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f25d28b8-e23d-4ce8-87b3-c5f179b6a80f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6d208f2-750a-4080-b753-f671f489afbb"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec58f44c-2e72-4c41-bc51-10e33c14a755"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmergencyStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3beb2d02-aa16-4070-8a19-5917a8303a81"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmergencyStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc6ab3b-c23f-4693-8f26-93d9208dacf6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""797adb35-82ba-4d36-8928-b6f9e1fcde96"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fed75aae-85a1-40f7-9a6b-30833c0d6275"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07bed8fc-8587-4552-b88f-1738d350538b"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""238cf4d1-e3ca-4c5c-a0a4-a84dbf3370df"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RandomizePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20ac5f31-2901-4cfe-bc1a-6396e88a2c7b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RandomizePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_ToggleLight = m_Player.FindAction("ToggleLight", throwIfNotFound: true);
        m_Player_EmergencyStop = m_Player.FindAction("EmergencyStop", throwIfNotFound: true);
        m_Player_IncrementLight = m_Player.FindAction("IncrementLight", throwIfNotFound: true);
        m_Player_DecrementLight = m_Player.FindAction("DecrementLight", throwIfNotFound: true);
        m_Player_RandomizePosition = m_Player.FindAction("RandomizePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_ToggleLight;
    private readonly InputAction m_Player_EmergencyStop;
    private readonly InputAction m_Player_IncrementLight;
    private readonly InputAction m_Player_DecrementLight;
    private readonly InputAction m_Player_RandomizePosition;
    public struct PlayerActions
    {
        private @SproutControls m_Wrapper;
        public PlayerActions(@SproutControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @ToggleLight => m_Wrapper.m_Player_ToggleLight;
        public InputAction @EmergencyStop => m_Wrapper.m_Player_EmergencyStop;
        public InputAction @IncrementLight => m_Wrapper.m_Player_IncrementLight;
        public InputAction @DecrementLight => m_Wrapper.m_Player_DecrementLight;
        public InputAction @RandomizePosition => m_Wrapper.m_Player_RandomizePosition;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @ToggleLight.started += instance.OnToggleLight;
            @ToggleLight.performed += instance.OnToggleLight;
            @ToggleLight.canceled += instance.OnToggleLight;
            @EmergencyStop.started += instance.OnEmergencyStop;
            @EmergencyStop.performed += instance.OnEmergencyStop;
            @EmergencyStop.canceled += instance.OnEmergencyStop;
            @IncrementLight.started += instance.OnIncrementLight;
            @IncrementLight.performed += instance.OnIncrementLight;
            @IncrementLight.canceled += instance.OnIncrementLight;
            @DecrementLight.started += instance.OnDecrementLight;
            @DecrementLight.performed += instance.OnDecrementLight;
            @DecrementLight.canceled += instance.OnDecrementLight;
            @RandomizePosition.started += instance.OnRandomizePosition;
            @RandomizePosition.performed += instance.OnRandomizePosition;
            @RandomizePosition.canceled += instance.OnRandomizePosition;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @ToggleLight.started -= instance.OnToggleLight;
            @ToggleLight.performed -= instance.OnToggleLight;
            @ToggleLight.canceled -= instance.OnToggleLight;
            @EmergencyStop.started -= instance.OnEmergencyStop;
            @EmergencyStop.performed -= instance.OnEmergencyStop;
            @EmergencyStop.canceled -= instance.OnEmergencyStop;
            @IncrementLight.started -= instance.OnIncrementLight;
            @IncrementLight.performed -= instance.OnIncrementLight;
            @IncrementLight.canceled -= instance.OnIncrementLight;
            @DecrementLight.started -= instance.OnDecrementLight;
            @DecrementLight.performed -= instance.OnDecrementLight;
            @DecrementLight.canceled -= instance.OnDecrementLight;
            @RandomizePosition.started -= instance.OnRandomizePosition;
            @RandomizePosition.performed -= instance.OnRandomizePosition;
            @RandomizePosition.canceled -= instance.OnRandomizePosition;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnToggleLight(InputAction.CallbackContext context);
        void OnEmergencyStop(InputAction.CallbackContext context);
        void OnIncrementLight(InputAction.CallbackContext context);
        void OnDecrementLight(InputAction.CallbackContext context);
        void OnRandomizePosition(InputAction.CallbackContext context);
    }
}
